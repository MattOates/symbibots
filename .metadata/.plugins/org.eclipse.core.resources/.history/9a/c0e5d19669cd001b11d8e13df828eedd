/**
 * The main GUI container for the Symbibots game. 
 */
package ui;

import game.Agent;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JToolBar;
import javax.swing.filechooser.FileFilter;

import vis.VisualisationPanel;

/**
 * @author  matt
 */
public class MainWindow extends JFrame implements ActionListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 382592117767573017L;
	
	/**
	 * VisualisationPanel, panel rendering the game graphics.
	 */
	private VisualisationPanel vispan = new VisualisationPanel();
	
	/**
	 * SidePanel, context sensitive panel for added human interaction.
	 */
	private SidePanel sidepan = new SidePanel();
	
	/**
	 * TextArea to dump logged strings from backend.
	 */
	private JTextArea log = new JTextArea(5, 50);
	
	/**
	 * Allow the log to be pull off'able.
	 */
	private JToolBar logbar = new JToolBar("Symbibots - Log");
	
	/**
	 * ScrollPane to allow resizing of the log.
	 */
	private JScrollPane logscroll = new JScrollPane(log);
	
	private boolean ready = false;

	public boolean paused = true;
	
	public MainWindow(String title) throws HeadlessException {
		super(title);
		setDefaultLookAndFeelDecorated(true);
		//setIconImage(new ImageIcon("app.gif").getImage());
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		//setup size and location of frame
		int screenwidth = 
			(int)Toolkit.getDefaultToolkit().getScreenSize().getWidth();
		int screenheight = 
			(int)Toolkit.getDefaultToolkit().getScreenSize().getHeight();
		setSize((3*screenwidth)/4,(3*screenheight)/4);
		setLocation(screenwidth/8,screenheight/8);
		
		addContent();
		//pack();
		setVisible(true);
		
		String user = JOptionPane.showInputDialog(null, "What is your username?");
		
		File profiles = new File("profiles");
		//Get a list of all the GeneClasses available in the Genes package.
		/*File[] users = profiles.listFiles(new DirectoryFilter());
		boolean newuser = true;
		for (File user : users) {
			user.getName() != username;
		}
		String username = gui.userPrompt();*/
	}

	/* (non-Javadoc)
	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 */
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if (e.getActionCommand() == "View Genes") {
			ready = true;
			sidepan.setBackground(new Color((int)(255 * Math.random()), (int)(255 * Math.random()), (int)(255 * Math.random())));
		}

	}
	
	public void addContent() {
		getContentPane().setLayout(new BorderLayout());		
		//Stop the user editing the log.
		log.setEditable(false);
		log.setLineWrap(false);
		log.setBackground(new Color(0,0,0));
		log.setForeground(new Color(0,255,0));
		
		//Setup the log to be resizable and pull off'able.
		logbar.add(logscroll);
		
		getContentPane().add(vispan, BorderLayout.CENTER);
		getContentPane().add(sidepan, BorderLayout.WEST);
		getContentPane().add(logbar, BorderLayout.SOUTH);
		
		JMenuBar menuBar = new JMenuBar();
		JMenuItem item;
	    JMenu menu;
	    
	    // Create File menu
	    menu= new JMenu("File");
	    menu.setMnemonic('F');
	    	item = new JMenuItem("New");
	    		item.setMnemonic('N');
    			item.addActionListener(this);
    			menu.add(item);
	    	item = new JMenuItem("Open...");
	    		item.setMnemonic('O');
	    		item.addActionListener(this);
	    		menu.add(item);
	    	item = new JMenuItem("Save...");
	    		item.setMnemonic('S');
	    		item.addActionListener(this);
	    		menu.add(item);
	    	item = new JMenuItem("Exit");
	    		item.setMnemonic('x');
	    		item.addActionListener(this);
	    		menu.add(item);
	    
	    // Install the menu bar in the frame
	    menuBar.add(menu);
	    setJMenuBar(menuBar);
	    
	    
	    //Create Agent context popupmenu
	    final JPopupMenu agentmenu = new JPopupMenu();
	    item = new JMenuItem("View Genes");
	    item.setToolTipText("View a game agents geneome in the side bar.");
	    item.addActionListener(this);
	    agentmenu.add(item);
	    agentmenu.add(new JMenuItem("Cancel"));
	    
	    // Set the component to show the popup menu
	    vispan.addMouseListener(new MouseAdapter() {
	        public void mousePressed(MouseEvent evt) {
	        	paused = !paused;
	            if (evt.isPopupTrigger()) {
	                int x, y;
	                x = evt.getX(); y = evt.getY();
	            	agentmenu.show(evt.getComponent(), x, y);
	                addLog("X: "+x+" Y: "+y);
	            }
	        }
	        public void mouseReleased(MouseEvent evt) {
	            if (evt.isPopupTrigger()) {
	                agentmenu.show(evt.getComponent(), evt.getX(), evt.getY());
	            }
	        }
	    });
	    
		
	}

	private class DirectoryFilter extends FileFilter {
		
		/* (non-Javadoc)
		 * @see javax.swing.filechooser.FileFilter#accept()
		 */
		@Override
		public boolean accept(File file) {
			return file.isDirectory();
		}

		/* (non-Javadoc)
		 * @see javax.swing.filechooser.FileFilter#getDescription()
		 */
		@Override
		public String getDescription() {
			return "Get all directories.";
		}
	}

	/**
	 * @param string
	 */
	public synchronized void addLog(String string) {
		log.append(string+"\n");
	}

	/**
	 * @return
	 */
	public boolean isReadyForGame() {
		return ready;
	}

	/**
	 * @return the paused
	 */
	public boolean isPaused() {
		return paused;
	}

	/**
	 * @param paused the paused to set
	 */
	public void setPaused(boolean paused) {
		this.paused = paused;
	}

}
