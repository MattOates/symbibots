/**
 * 
 */
package ga.crossover;

import ga.Chromosome;
import ga.Crossover;
import ga.Gene;
import ga.GeneticAlgorithm;

/**
 * @author matt
 *
 */
public class SinglePointCrossover implements Crossover {
	
	public SinglePointCrossover() {}

	public Chromosome[] cross(Chromosome mother, Chromosome father) {
		Chromosome[] children = new Chromosome[2];
			children[0] = new Chromosome();
			children[1] = new Chromosome();
		int size = mother.getSize();
		int locus = (int) Math.round(GeneticAlgorithm.getRandNum() * (size -1));
		
		System.out.println("Single Point Crossover, locus is: "+locus);
		
		for (int index = 0; index < size; index++) {
			if (index < locus) {
				try {
					children[0].addGene((Gene)mother.getGene(index).clone());
					children[1].addGene((Gene)father.getGene(index).clone());
				} catch (CloneNotSupportedException e) {
					e.printStackTrace();
				}
			}
			else {
				try {
					children[0].addGene((Gene)father.getGene(index).clone());
					children[1].addGene((Gene)mother.getGene(index).clone());
				} catch (CloneNotSupportedException e) {
					e.printStackTrace();
				}	
			}
		}	
		
		System.out.println("Child 0: "+children[0]);
		System.out.println("Child 1: "+children[1]);
		
		return children;
	}

	public String toInfoString() {
		return "Single point crossover. A random locus point is selected and each division from one chromosome is crossed with the other to form two new Chromosomes";
	}

}
